package com.maro.client.common.net;

import net.sf.json.JSONObject;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.CookieStore;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.*;
import org.apache.http.message.BasicHeader;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.apache.log4j.Logger;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class HttpHelper {

    private static CookieStore cookieStore = new BasicCookieStore();
    private static CloseableHttpClient httpClient;
    private static HttpClientContext httpClientContext;
    private static RequestConfig requestConfig;

    private static Logger log = Logger.getLogger(HttpHelper.class);

    public static String doPost(String url, JSONObject map, String charset){
        init();
        String result = null;
        try{
            HttpPost httpPost = new HttpPost(url);
            //设置参数
//            List<NameValuePair> list = new ArrayList<NameValuePair>();
//            Iterator iterator = map.entrySet().iterator();
//            while(iterator.hasNext()){
//                Map.Entry<String,String> elem = (Map.Entry<String, String>) iterator.next();
//                list.add(new BasicNameValuePair(elem.getKey(),elem.getValue()));
//            }
            if(map.size() > 0){
//                UrlEncodedFormEntity entity = new UrlEncodedFormEntity(list,charset);
//                entity.setContentEncoding(charset);

//                entity.setContentType("application/json; charset=UTF-8");
                httpPost.setHeader(new BasicHeader("Content-Type", "application/json; charset=utf-8"));
                httpPost.setHeader(new BasicHeader("Accept", "application/json; charset=utf-8"));
                StringEntity stringEntity = new StringEntity(map.toString(), "UTF-8");
                stringEntity.setContentType("application/json");
                stringEntity.setContentEncoding(charset);
                httpPost.setEntity(stringEntity);
            }

            HttpResponse response = httpClient.execute(httpPost,httpClientContext);
            if(response != null){
                HttpEntity resEntity = response.getEntity();
                if(resEntity != null){
                    cookieStore = httpClientContext.getCookieStore();
                    result = EntityUtils.toString(resEntity,charset);
                    log.error("调用结果："+result);
                }
            }
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return result;
    }

    private static void init(){
        if(httpClientContext == null) {
            httpClientContext = HttpClientContext.create();
        }
        requestConfig = RequestConfig.custom().setConnectTimeout(120000).setSocketTimeout(60000).setConnectionRequestTimeout(60000).build();
        httpClient = HttpClientBuilder.create()
                .setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy())
                .setRedirectStrategy(new DefaultRedirectStrategy()).setDefaultRequestConfig(requestConfig)
                .setDefaultCookieStore(cookieStore).build();
    }

    public static String doGet(String url, Map<String,String> map, String charset){
        init();
        String result = null;
        HttpResponse response = null;
        try{
            //设置参数
            List<NameValuePair> list = new ArrayList<NameValuePair>();
            Iterator iterator = map.entrySet().iterator();
            while(iterator.hasNext()){
                Map.Entry<String,String> elem = (Map.Entry<String, String>) iterator.next();
                list.add(new BasicNameValuePair(elem.getKey(),elem.getValue()));
            }
            url +="&"+EntityUtils.toString(new UrlEncodedFormEntity(list,charset), charset);
            HttpGet httpGet = new HttpGet(url);

            response = httpClient.execute(httpGet,httpClientContext);
            if(response != null){
                HttpEntity resEntity = response.getEntity();
                if(resEntity != null){
                    cookieStore = httpClientContext.getCookieStore();
                    result = EntityUtils.toString(resEntity,charset);
                }
            }
        }catch(Exception ex){
            ex.printStackTrace();
        }finally {

        }
        return result;
    }

    public static void main(String[] args) throws UnsupportedEncodingException {
        String a = "鎴愰兘闈掔緤鍏夊崕搴�";
        String s = new String(a.getBytes("GBK"), "UTF-8");
        System.out.println(s);
    }
}
