package com.maro.manager.store.storeflow.controller;

import com.alibaba.fastjson.JSONArray;
import com.maro.common.constant.MaterialClassConstant;
import com.maro.common.constant.StoreFlowConstant;
import com.maro.common.util.Util;
import com.maro.manager.common.service.UtilServiceI;
import com.maro.manager.dishes.materialclass.entity.MaroMaterialClassEntity;
import com.maro.manager.dishes.materialclass.service.MaroMaterialClassServiceI;
import com.maro.manager.store.purchasedetail.entity.MaroPurchaseDetailEntity;
import com.maro.manager.store.storeflow.entity.MaroStoreFlowEntity;
import com.maro.manager.store.storeflow.service.MaroStoreFlowServiceI;
import com.maro.manager.store.storegoods.entity.MaroStoreGoodsEntity;
import com.maro.manager.store.storegoods.service.MaroStoreGoodsServiceI;
import com.maro.platform.core.beanvalidator.BeanValidators;
import com.maro.platform.core.common.controller.BaseController;
import com.maro.platform.core.common.exception.BusinessException;
import com.maro.platform.core.common.hibernate.qbc.CriteriaQuery;
import com.maro.platform.core.common.model.json.AjaxJson;
import com.maro.platform.core.common.model.json.DataGrid;
import com.maro.platform.core.constant.Globals;
import com.maro.platform.core.extend.hqlsearch.HqlGenerateUtil;
import com.maro.platform.core.util.ExceptionUtil;
import com.maro.platform.core.util.MyBeanUtils;
import com.maro.platform.core.util.ResourceUtil;
import com.maro.platform.core.util.StringUtil;
import com.maro.platform.jwt.util.ResponseMessage;
import com.maro.platform.jwt.util.Result;
import com.maro.platform.tag.core.easyui.TagUtil;
import com.maro.platform.web.system.service.SystemService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.jeecgframework.poi.excel.ExcelImportUtil;
import org.jeecgframework.poi.excel.entity.ExportParams;
import org.jeecgframework.poi.excel.entity.ImportParams;
import org.jeecgframework.poi.excel.entity.vo.NormalExcelConstants;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.UriComponentsBuilder;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolation;
import javax.validation.Validator;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**   
 * @Title: Controller  
 * @Description: 流水表
 * @author onlineGenerator
 * @date 2018-05-04 09:32:15
 * @version V1.0   
 *
 */
@Api(value="MaroStoreFlow",description="流水表",tags="maroStoreFlowController")
@Controller
@RequestMapping("/maroStoreFlowController")
public class MaroStoreFlowController extends BaseController {
	/**
	 * Logger for this class
	 */
	private static final Logger logger = Logger.getLogger(MaroStoreFlowController.class);

	@Autowired
	private MaroStoreFlowServiceI maroStoreFlowService;
	@Autowired
	private SystemService systemService;
	@Autowired
	private Validator validator;
	@Autowired
	private UtilServiceI UtilService;
	@Autowired
	private MaroMaterialClassServiceI maroMaterialClassService;
	@Autowired
	private MaroStoreGoodsServiceI maroStoreGoodsService;
	/**
	 * 流水表列表 页面跳转
	 * 
	 * @return
	 */
	@RequestMapping(params = "list")
	public ModelAndView list(HttpServletRequest request) {
		return new ModelAndView("com/maro/manager/store/storeflow/maroStoreFlowList");
	}

	/**
	 * easyui AJAX请求数据
	 * 
	 * @param request
	 * @param response
	 * @param dataGrid
	 * @param user
	 */

	@RequestMapping(params = "datagrid")
	public void datagrid(MaroStoreFlowEntity maroStoreFlow,HttpServletRequest request, HttpServletResponse response, DataGrid dataGrid) {
		CriteriaQuery cq = new CriteriaQuery(MaroStoreFlowEntity.class, dataGrid);
		//查询条件组装器
		HqlGenerateUtil.installHql(cq, maroStoreFlow, request.getParameterMap());
		try{
			//自定义追加查询条件
			//获取用户id
			String userId = ResourceUtil.getSessionUser().getId();
			//获取角色编码
			String roleCodes = (String)request.getSession().getAttribute("maroRoleCodes");
			//验证是不是管理员的角色
			boolean admin = Util.ifRoleCode();
			if(!admin){
				String shopId = UtilService.getShopIdByUserId(userId);
				cq.eq("shopId", shopId);
			}
		}catch (Exception e) {
			throw new BusinessException(e.getMessage());
		}
		cq.add();
		this.maroStoreFlowService.getDataGridReturn(cq, true);
		//获取所有原料信息
		List<MaroMaterialClassEntity> maroMaterialClassEntitys = maroMaterialClassService.getList(MaroMaterialClassEntity.class);
		//给原料数量加上单位属性
		for(MaroStoreFlowEntity m:(List<MaroStoreFlowEntity>)dataGrid.getResults()){
			String goodsId = m.getGoodsId();
			for(MaroMaterialClassEntity mm:maroMaterialClassEntitys){
				if(mm.getId().equals(goodsId)){
					if(MaterialClassConstant.CHAILIN.equals(mm.getType())){//拆零原料
						m.setNumber(m.getNumber()+Util.getValueFromTypeByTypeCodeAndKey("maro_ordinary_unit", mm.getScattered()));
					}else if(MaterialClassConstant.CHENGZHONG.equals(mm.getType())){//称重原料
						m.setNumber(m.getNumber()+Util.getValueFromTypeByTypeCodeAndKey("maro_weighing_unit", mm.getDenominatedUnit()));
					}else{//普通原料
						m.setNumber(m.getNumber()+Util.getValueFromTypeByTypeCodeAndKey("maro_ordinary_unit", mm.getDenominatedUnit()));
					}
				}
				continue;
			}
		}
		TagUtil.datagrid(response, dataGrid);
	}
	
	/**
	 * 删除流水表
	 * 
	 * @return
	 */
	@RequestMapping(params = "doDel")
	@ResponseBody
	public AjaxJson doDel(MaroStoreFlowEntity maroStoreFlow, HttpServletRequest request) {
		String message = null;
		AjaxJson j = new AjaxJson();
		maroStoreFlow = systemService.getEntity(MaroStoreFlowEntity.class, maroStoreFlow.getId());
		message = "流水表删除成功";
		try{
			//获取该流水的出入库类型，如果为入库操作，则减去相应库存数量
			//如果为出库，则增加相应数量
			//获取该流水表的采购详情id，如果id不为null,则需要改变采购详情中的状态为未入库，后续可以重新入库
			//获取采购详情id
			String purchaseDetailId = maroStoreFlow.getPurchaseDetailId();
			//获取出入库类型
			Integer type = maroStoreFlow.getType();
			//获取原料数量
			String number = maroStoreFlow.getNumber();
			//获取仓库id
			String storeId = maroStoreFlow.getStoreId();
			//获取原料id
			String goodsId = maroStoreFlow.getGoodsId();
			if(type!=null){
				if(type== StoreFlowConstant.INSTORE){//入库
					if(purchaseDetailId!=null&&purchaseDetailId!=""){
						//修改对应的采购详情为未入库
						MaroPurchaseDetailEntity entity = maroStoreFlowService.getEntity(MaroPurchaseDetailEntity.class, purchaseDetailId);
						entity.setIsInStore(1);
						maroStoreFlowService.saveOrUpdate(entity);
					}
					//更改仓库中对应的原料数量
					MaroStoreGoodsEntity entity=maroStoreGoodsService.getEntityByStoreIdAndGoodsId(storeId,goodsId);
					if(entity!=null){
						Double oldnum=Double.valueOf(entity.getNumber()==null?"0":entity.getNumber());
						Double newnum=oldnum-Double.valueOf(number);
						entity.setNumber(newnum.toString());
						maroStoreGoodsService.saveOrUpdate(entity);
					}
				}
				if(type==StoreFlowConstant.OUTSTORE){//出库
					//更改仓库中对应的原料数量
					MaroStoreGoodsEntity entity=maroStoreGoodsService.getEntityByStoreIdAndGoodsId(storeId,goodsId);
					if(entity!=null){
						Double oldnum=Double.valueOf(entity.getNumber()==null?"0":entity.getNumber());
						Double newnum=oldnum+Double.valueOf(number);
						entity.setNumber(newnum.toString());
						maroStoreGoodsService.saveOrUpdate(entity);
					}
				}
			}
			maroStoreFlowService.delete(maroStoreFlow);
			systemService.addLog(message, Globals.Log_Type_DEL, Globals.Log_Leavel_INFO);
		}catch(Exception e){
			e.printStackTrace();
			message = "流水表删除失败";
			throw new BusinessException(e.getMessage());
		}
		j.setMsg(message);
		return j;
	}
	
	/**
	 * 批量删除流水表
	 * 
	 * @return
	 */
	 @RequestMapping(params = "doBatchDel")
	@ResponseBody
	public AjaxJson doBatchDel(String ids,HttpServletRequest request){
		String message = null;
		AjaxJson j = new AjaxJson();
		message = "流水表删除成功";
		try{
			for(String id:ids.split(",")){
				MaroStoreFlowEntity maroStoreFlow = systemService.getEntity(MaroStoreFlowEntity.class, 
				id
				);
				maroStoreFlowService.delete(maroStoreFlow);
				systemService.addLog(message, Globals.Log_Type_DEL, Globals.Log_Leavel_INFO);
			}
		}catch(Exception e){
			e.printStackTrace();
			message = "流水表删除失败";
			throw new BusinessException(e.getMessage());
		}
		j.setMsg(message);
		return j;
	}


	/**
	 * 添加流水表
	 * 
	 * @param ids
	 * @return
	 */
	@RequestMapping(params = "doAdd")
	@ResponseBody
	public AjaxJson doAdd(MaroStoreFlowEntity maroStoreFlow, HttpServletRequest request) {
		String comeFrom = request.getParameter("comeFrom");
		String message = null;
		AjaxJson j = new AjaxJson();
		message = "流水表添加成功";
		try{
			maroStoreFlowService.doAdd(comeFrom,maroStoreFlow);
			systemService.addLog(message, Globals.Log_Type_INSERT, Globals.Log_Leavel_INFO);
		}catch(Exception e){
			e.printStackTrace();
			message = "流水表添加失败";
			throw new BusinessException(e.getMessage());
		}
		j.setMsg(message);
		return j;
	}

	/**
	 * mq入库操作
	 * @param request
	 * @param message
	 * @return
	 */
	@RequestMapping(params = "mqDoAdd")
	@ResponseBody
	public AjaxJson mqDoAddFlow(HttpServletRequest request,String message) {
		AjaxJson j = new AjaxJson();
		try {
			String comeFrom=(String)Util.jsonToObject(message,0);
			MaroStoreFlowEntity maroStoreFlow=(MaroStoreFlowEntity)Util.jsonToObject(message,1);
			maroStoreFlowService.doAdd(comeFrom,maroStoreFlow);
			systemService.addLog("流水表添加成功", Globals.Log_Type_INSERT, Globals.Log_Leavel_INFO);
		} catch (Exception e) {
			// TODO: handle exception
			j.setSuccess(false);
		}
		return j;
	}

	/**
	 * 更新流水表
	 * 
	 * @param ids
	 * @return
	 */
	@RequestMapping(params = "doUpdate")
	@ResponseBody
	public AjaxJson doUpdate(MaroStoreFlowEntity maroStoreFlow, HttpServletRequest request) {
		String message = null;
		AjaxJson j = new AjaxJson();
		message = "流水表更新成功";
		MaroStoreFlowEntity t = maroStoreFlowService.get(MaroStoreFlowEntity.class, maroStoreFlow.getId());
		try {
			MyBeanUtils.copyBeanNotNull2Bean(maroStoreFlow, t);
			maroStoreFlowService.saveOrUpdate(t);
			systemService.addLog(message, Globals.Log_Type_UPDATE, Globals.Log_Leavel_INFO);
		} catch (Exception e) {
			e.printStackTrace();
			message = "流水表更新失败";
			throw new BusinessException(e.getMessage());
		}
		j.setMsg(message);
		return j;
	}
	

	/**
	 * 流水表新增页面跳转
	 * 
	 * @return
	 */
	@RequestMapping(params = "goAdd")
	public ModelAndView goAdd(MaroStoreFlowEntity maroStoreFlow, HttpServletRequest req) {
		if (StringUtil.isNotEmpty(maroStoreFlow.getId())) {
			maroStoreFlow = maroStoreFlowService.getEntity(MaroStoreFlowEntity.class, maroStoreFlow.getId());
			req.setAttribute("maroStoreFlowPage", maroStoreFlow);
		}
		//获取用户id
		String userId = ResourceUtil.getSessionUser().getId();
		//获取角色编码
		String roleCodes = (String)req.getSession().getAttribute("maroRoleCodes");
		//验证是不是管理员的角色
		boolean admin = Util.ifRoleCode();
		if(!admin){
			String shopId = UtilService.getShopIdByUserId(userId);
			//给页面传递的条件参数
			req.setAttribute("shopId", shopId);
			req.setAttribute("shopIdCondition", "where id='"+shopId+"'");
			req.setAttribute("storeCondition", "where shop_id='"+shopId+"'");
		}
		req.setAttribute("admin", admin);
		req.setAttribute("in_or_out", StoreFlowConstant.INSTORE);
		return new ModelAndView("com/maro/manager/store/storeflow/maroStoreFlow-add");
	}
	/**
	 * 流水表新增页面跳转
	 * 
	 * @return
	 */
	@RequestMapping(params = "goOut")
	public ModelAndView goOut(MaroStoreFlowEntity maroStoreFlow, HttpServletRequest req) {
		if (StringUtil.isNotEmpty(maroStoreFlow.getId())) {
			maroStoreFlow = maroStoreFlowService.getEntity(MaroStoreFlowEntity.class, maroStoreFlow.getId());
			req.setAttribute("maroStoreFlowPage", maroStoreFlow);
		}
		//获取用户id
		String userId = ResourceUtil.getSessionUser().getId();
		//获取角色编码
		String roleCodes = (String)req.getSession().getAttribute("maroRoleCodes");
		//验证是不是管理员的角色
		boolean admin = Util.ifRoleCode();
		if(!admin){
			String shopId = UtilService.getShopIdByUserId(userId);
			//给页面传递的条件参数
			req.setAttribute("shopId", shopId);
			req.setAttribute("shopIdCondition", "where id='"+shopId+"'");
			req.setAttribute("storeCondition", "where shop_id='"+shopId+"'");
		}
		req.setAttribute("admin", admin);
		req.setAttribute("in_or_out", StoreFlowConstant.OUTSTORE);
		return new ModelAndView("com/maro/manager/store/storeflow/maroStoreFlow-out");
	}
	/**
	 * 流水表编辑页面跳转
	 * 
	 * @return
	 */
	@RequestMapping(params = "goUpdate")
	public ModelAndView goUpdate(MaroStoreFlowEntity maroStoreFlow, HttpServletRequest req) {
		if (StringUtil.isNotEmpty(maroStoreFlow.getId())) {
			maroStoreFlow = maroStoreFlowService.getEntity(MaroStoreFlowEntity.class, maroStoreFlow.getId());
			req.setAttribute("maroStoreFlowPage", maroStoreFlow);
		}
		return new ModelAndView("com/maro/manager/store/storeflow/maroStoreFlow-update");
	}
	
	/**
	 * 导入功能跳转
	 * 
	 * @return
	 */
	@RequestMapping(params = "upload")
	public ModelAndView upload(HttpServletRequest req) {
		req.setAttribute("controller_name","maroStoreFlowController");
		return new ModelAndView("common/upload/pub_excel_upload");
	}
	
	/**
	 * 导出excel
	 * 
	 * @param request
	 * @param response
	 */
	@RequestMapping(params = "exportXls")
	public String exportXls(MaroStoreFlowEntity maroStoreFlow,HttpServletRequest request,HttpServletResponse response
			, DataGrid dataGrid,ModelMap modelMap) {
		CriteriaQuery cq = new CriteriaQuery(MaroStoreFlowEntity.class, dataGrid);
		HqlGenerateUtil.installHql(cq, maroStoreFlow, request.getParameterMap());
		List<MaroStoreFlowEntity> maroStoreFlows = this.maroStoreFlowService.getListByCriteriaQuery(cq,false);
		modelMap.put(NormalExcelConstants.FILE_NAME,"流水表");
		modelMap.put(NormalExcelConstants.CLASS,MaroStoreFlowEntity.class);
		modelMap.put(NormalExcelConstants.PARAMS,new ExportParams("流水表列表", "导出人:"+ResourceUtil.getSessionUser().getRealName(),
			"导出信息"));
		modelMap.put(NormalExcelConstants.DATA_LIST,maroStoreFlows);
		return NormalExcelConstants.JEECG_EXCEL_VIEW;
	}
	/**
	 * 导出excel 使模板
	 * 
	 * @param request
	 * @param response
	 */
	@RequestMapping(params = "exportXlsByT")
	public String exportXlsByT(MaroStoreFlowEntity maroStoreFlow,HttpServletRequest request,HttpServletResponse response
			, DataGrid dataGrid,ModelMap modelMap) {
    	modelMap.put(NormalExcelConstants.FILE_NAME,"流水表");
    	modelMap.put(NormalExcelConstants.CLASS,MaroStoreFlowEntity.class);
    	modelMap.put(NormalExcelConstants.PARAMS,new ExportParams("流水表列表", "导出人:"+ResourceUtil.getSessionUser().getRealName(),
    	"导出信息"));
    	modelMap.put(NormalExcelConstants.DATA_LIST,new ArrayList());
    	return NormalExcelConstants.JEECG_EXCEL_VIEW;
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(params = "importExcel", method = RequestMethod.POST)
	@ResponseBody
	public AjaxJson importExcel(HttpServletRequest request, HttpServletResponse response) {
		AjaxJson j = new AjaxJson();
		
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		Map<String, MultipartFile> fileMap = multipartRequest.getFileMap();
		for (Map.Entry<String, MultipartFile> entity : fileMap.entrySet()) {
			MultipartFile file = entity.getValue();// 获取上传文件对象
			ImportParams params = new ImportParams();
			params.setTitleRows(2);
			params.setHeadRows(1);
			params.setNeedSave(true);
			try {
				List<MaroStoreFlowEntity> listMaroStoreFlowEntitys = ExcelImportUtil.importExcel(file.getInputStream(),MaroStoreFlowEntity.class,params);
				for (MaroStoreFlowEntity maroStoreFlow : listMaroStoreFlowEntitys) {
					maroStoreFlowService.save(maroStoreFlow);
				}
				j.setMsg("文件导入成功！");
			} catch (Exception e) {
				j.setMsg("文件导入失败！");
				logger.error(ExceptionUtil.getExceptionMessage(e));
			}finally{
				try {
					file.getInputStream().close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return j;
	}
	
	@RequestMapping(method = RequestMethod.GET)
	@ResponseBody
	@ApiOperation(value="流水表列表信息",produces="application/json",httpMethod="GET")
	public ResponseMessage<List<MaroStoreFlowEntity>> list() {
		List<MaroStoreFlowEntity> listMaroStoreFlows=maroStoreFlowService.getList(MaroStoreFlowEntity.class);
		return Result.success(listMaroStoreFlows);
	}
	
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	@ResponseBody
	@ApiOperation(value="根据ID获取流水表信息",notes="根据ID获取流水表信息",httpMethod="GET",produces="application/json")
	public ResponseMessage<?> get(@ApiParam(required=true,name="id",value="ID")@PathVariable("id") String id) {
		MaroStoreFlowEntity task = maroStoreFlowService.get(MaroStoreFlowEntity.class, id);
		if (task == null) {
			return Result.error("根据ID获取流水表信息为空");
		}
		return Result.success(task);
	}

	@RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	@ApiOperation(value="创建流水表")
	public ResponseMessage<?> create(@ApiParam(name="流水表对象")@RequestBody MaroStoreFlowEntity maroStoreFlow, UriComponentsBuilder uriBuilder) {
		//调用JSR303 Bean Validator进行校验，如果出错返回含400错误码及json格式的错误信息.
		Set<ConstraintViolation<MaroStoreFlowEntity>> failures = validator.validate(maroStoreFlow);
		if (!failures.isEmpty()) {
			return Result.error(JSONArray.toJSONString(BeanValidators.extractPropertyAndMessage(failures)));
		}

		//保存
		try{
			maroStoreFlowService.save(maroStoreFlow);
		} catch (Exception e) {
			e.printStackTrace();
			return Result.error("流水表信息保存失败");
		}
		return Result.success(maroStoreFlow);
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	@ApiOperation(value="更新流水表",notes="更新流水表")
	public ResponseMessage<?> update(@ApiParam(name="流水表对象")@RequestBody MaroStoreFlowEntity maroStoreFlow) {
		//调用JSR303 Bean Validator进行校验，如果出错返回含400错误码及json格式的错误信息.
		Set<ConstraintViolation<MaroStoreFlowEntity>> failures = validator.validate(maroStoreFlow);
		if (!failures.isEmpty()) {
			return Result.error(JSONArray.toJSONString(BeanValidators.extractPropertyAndMessage(failures)));
		}

		//保存
		try{
			maroStoreFlowService.saveOrUpdate(maroStoreFlow);
		} catch (Exception e) {
			e.printStackTrace();
			return Result.error("更新流水表信息失败");
		}

		//按Restful约定，返回204状态码, 无内容. 也可以返回200状态码.
		return Result.success("更新流水表信息成功");
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	@ResponseStatus(HttpStatus.NO_CONTENT)
	@ApiOperation(value="删除流水表")
	public ResponseMessage<?> delete(@ApiParam(name="id",value="ID",required=true)@PathVariable("id") String id) {
		logger.info("delete[{}]" + id);
		// 验证
		if (StringUtils.isEmpty(id)) {
			return Result.error("ID不能为空");
		}
		try {
			maroStoreFlowService.deleteEntityById(MaroStoreFlowEntity.class, id);
		} catch (Exception e) {
			e.printStackTrace();
			return Result.error("流水表删除失败");
		}
		return Result.success();
	}
	/**
	 * 根据店铺id和标签码获取该标签对应的原料库存信息
	 * @param request
	 * @return
	 * @author gongdaohai
	 * @since v1.0,2018年5月9日
	 * @version
	 */
	@RequestMapping(params = "getMaterialInfo")
	@ResponseBody
	public AjaxJson getMaterialInfo(HttpServletRequest request) {
		AjaxJson j = new AjaxJson();
		try{
			String labelCode = request.getParameter("labelCode");
			String shopId = request.getParameter("shopId");
			if(shopId!=null&&"".equals(shopId)) shopId=null;
			List<Map> maps=maroStoreFlowService.getMaterialInfo(labelCode,shopId);
			if(maps==null){
				j.setSuccess(false);
				j.setMsg("无相关信息！");
			}else if(maps!=null&&maps.size()>1){
				StringBuffer s=new StringBuffer();
				for(Map map:maps){
					s.append(map.get("storeName")+"、");
				}
				j.setSuccess(false);
				j.setMsg("该原料分布于["+s.toString().substring(0,s.toString().length()-1)+"]，请先移动至一个库后进行操作！");
			}else{
				Map map=maps.get(0);
				/*String type=map.get("type").toString();
				if(MaterialClassConstant.CHAILIN.equals(type)){//拆零原料
					map.put("unitString", Util.getValueFromTypeByTypeCodeAndKey("maro_ordinary_unit", map.get("scattered").toString()));
				}else if(MaterialClassConstant.CHENGZHONG.equals(type)){//称重原料
					map.put("unitString", Util.getValueFromTypeByTypeCodeAndKey("maro_weighing_unit", map.get("unit").toString()));
				}else{//普通原料
					map.put("unitString", Util.getValueFromTypeByTypeCodeAndKey("maro_ordinary_unit", map.get("unit").toString()));
				}*/
				j.setObj(map);
			}
		}catch(Exception e){
			e.printStackTrace();
			j.setSuccess(false);
			j.setMsg("查询失败！");
		}
		return j;
	}
}
